%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.8
%%CreationDate: Thu Aug 31 10:00:30 2023
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
UGUCGGAGCAGAGGAUAUUACAUGAGGAUCACCCAUGUAUGAACCAAUAGCUGGUAACAGCAAUGUAAGAAGGCUGCUCCGACA\
) def
/coor [
[87.59391022 417.56488037]
[87.59391022 402.56488037]
[87.59391022 387.56488037]
[87.59391022 372.56488037]
[87.59391022 357.56488037]
[87.59391022 342.56488037]
[87.59391022 327.56488037]
[87.59391022 312.56488037]
[87.59391022 297.56488037]
[87.59391022 282.56488037]
[87.59391022 267.56488037]
[74.70677948 262.09982300]
[64.87699890 252.07269287]
[59.63670349 238.99850464]
[59.82103348 224.87080383]
[65.43521881 211.85766602]
[75.64862823 201.96900940]
[88.91751862 196.74615479]
[89.47178650 181.75640869]
[90.02606201 166.76664734]
[90.58032990 151.77688599]
[91.13460541 136.78713989]
[91.68888092 121.79737854]
[75.94988251 112.74193573]
[69.72824097 92.84479523]
[79.68457031 71.50582123]
[72.26473236 58.46949005]
[58.71399689 50.30321503]
[59.14278030 35.41478348]
[51.72294235 22.37844849]
[44.30310440 9.34211349]
[28.86699677 7.75901079]
[17.33193970 -2.61991429]
[14.13339710 -17.80375290]
[20.50127411 -31.95401001]
[33.98699188 -39.62961960]
[49.40501785 -37.87915802]
[60.82680511 -27.37571144]
[63.86044312 -12.15806866]
[57.33943558 1.92227590]
[64.75927734 14.95861053]
[72.17911530 27.99494362]
[85.19913483 35.22877502]
[85.30107117 51.04965210]
[92.72090912 64.08599091]
[100.03724670 65.73558807]
[103.33668518 51.10295868]
[117.96925354 54.40264130]
[114.66992188 69.03478241]
[121.98626709 70.68437958]
[134.28237915 62.09334946]
[146.57847595 53.50232315]
[158.87458801 44.91129684]
[165.32647705 29.83465767]
[181.63916016 28.15276909]
[191.03152466 41.59581375]
[183.84152222 56.33473969]
[167.46560669 57.20740509]
[155.16950989 65.79843140]
[142.87339783 74.38945770]
[130.57728577 82.98048401]
[127.01284027 110.98617554]
[106.67863464 122.35165405]
[106.12435913 137.34140015]
[105.57009125 152.33116150]
[105.01581573 167.32092285]
[104.46154785 182.31066895]
[103.90727234 197.30043030]
[118.26914978 204.70063782]
[127.97805023 217.54208374]
[131.16058350 233.26416016]
[127.23852539 248.75875854]
[117.03316498 260.98474121]
[102.59391022 267.56488037]
[102.59391022 282.56488037]
[102.59391022 297.56488037]
[102.59391022 312.56488037]
[102.59391022 327.56488037]
[102.59391022 342.56488037]
[102.59391022 357.56488037]
[102.59391022 372.56488037]
[102.59391022 387.56488037]
[102.59391022 402.56488037]
[102.59391022 417.56488037]
] def
/pairs [
[1 84]
[2 83]
[3 82]
[4 81]
[5 80]
[6 79]
[7 78]
[8 77]
[9 76]
[10 75]
[11 74]
[18 68]
[19 67]
[20 66]
[21 65]
[22 64]
[23 63]
[26 45]
[27 44]
[29 42]
[30 41]
[31 40]
[50 61]
[51 60]
[52 59]
[53 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
