%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.8
%%CreationDate: Sun Sep  3 19:18:19 2023
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
GUGAUACUUGGAGGAUAUGCUUUCACCUGGUACUCUAUUACAGUGACAUGAGGAUCACCCAUGUAGCAGAAGGCCAGUCAUCGA\
) def
/coor [
[87.61050415 361.54446411]
[93.65684509 345.70535278]
[93.65684509 330.70535278]
[93.65684509 315.70535278]
[93.65684509 300.70535278]
[93.37966156 285.70788574]
[92.82538605 270.71813965]
[92.27111816 255.72839355]
[88.79376221 248.99990845]
[91.98368835 240.17668152]
[91.98368835 225.17668152]
[79.09656525 219.71162415]
[69.26677704 209.68449402]
[64.02648163 196.61029053]
[64.21081543 182.48258972]
[69.82499695 169.46945190]
[80.03840637 159.58079529]
[93.30729675 154.35794067]
[93.86156464 139.36819458]
[94.41584015 124.37843323]
[94.97011566 109.38867950]
[87.95382690 107.69009399]
[82.09757996 101.02811432]
[80.60763550 90.55012512]
[72.24529266 78.09735870]
[63.88295364 65.64459991]
[56.31587219 60.09804535]
[55.45165634 52.57358170]
[47.55517197 39.82032394]
[32.29297256 40.97088623]
[18.24887657 34.88631439]
[8.65011978 22.96480370]
[5.70242357 7.94582605]
[10.08314800 -6.71936560]
[20.78563309 -17.66081810]
[35.35052872 -22.36426544]
[50.43092728 -19.74888992]
[62.56146240 -10.41568661]
[68.95462799 3.49064374]
[68.14131927 18.77452850]
[60.30842972 31.92384148]
[68.20491028 44.67709732]
[76.33571625 57.28226089]
[84.69805145 69.73502350]
[93.06039429 82.18778229]
[107.85340881 84.67108917]
[119.82366943 75.63156891]
[131.79393005 66.59204865]
[143.76417542 57.55252838]
[155.73443604 48.51301193]
[160.85317993 40.65021133]
[168.31819153 39.37038422]
[180.61430359 30.77935600]
[187.06619263 15.70271683]
[203.37886047 14.02082825]
[212.77124023 27.46387291]
[205.58123779 42.20280075]
[189.20532227 43.07546234]
[176.90921021 51.66648865]
[164.77395630 60.48326874]
[152.80369568 69.52278900]
[140.83345032 78.56230927]
[128.86318970 87.60182953]
[116.89292908 96.64134979]
[109.95986938 109.94295502]
[109.40559387 124.93270874]
[108.85132599 139.92247009]
[108.29705048 154.91221619]
[122.65892792 162.31242371]
[132.36782837 175.15388489]
[135.55035400 190.87594604]
[131.62829590 206.37054443]
[121.42294312 218.59654236]
[106.98368835 225.17668152]
[106.98368835 240.17668152]
[107.26087189 255.17411804]
[107.81513977 270.16387939]
[108.36941528 285.15362549]
[111.88319397 293.85296631]
[108.65684509 300.70535278]
[108.65684509 315.70535278]
[108.65684509 330.70535278]
[108.65684509 345.70535278]
[114.70318604 361.54446411]
] def
/pairs [
[2 83]
[3 82]
[4 81]
[5 80]
[6 78]
[7 77]
[8 76]
[10 75]
[11 74]
[18 68]
[19 67]
[20 66]
[21 65]
[24 45]
[25 44]
[26 43]
[28 42]
[29 41]
[46 64]
[47 63]
[48 62]
[49 61]
[50 60]
[52 59]
[53 58]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
