%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.8
%%CreationDate: Sat Jul  8 20:08:34 2023
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
AUGGUUGUCGUAGGAUAUGUAGGAUAUUCCUACAUGAGGAUCACCCAUGUUCGCAUGGAAGAAGGACAGAAGGACGAUAACCAC\
) def
/coor [
[82.73759460 386.22082520]
[88.78393555 370.38171387]
[88.78393555 355.38171387]
[88.78393555 340.38171387]
[88.78393555 325.38171387]
[88.78393555 310.38171387]
[88.78393555 295.38171387]
[88.78393555 280.38171387]
[88.78393555 265.38171387]
[88.78393555 250.38169861]
[88.78393555 235.38169861]
[75.89681244 229.91664124]
[66.06703186 219.88951111]
[60.82673264 206.81532288]
[61.01106262 192.68760681]
[66.62524414 179.67448425]
[76.83866119 169.78582764]
[90.10754395 164.56297302]
[90.66181946 149.57321167]
[91.21608734 134.58345032]
[78.62524414 128.57083130]
[69.30281830 118.18943024]
[64.67430115 105.02667999]
[65.44744873 91.09529877]
[71.50402832 78.52554321]
[81.91793823 69.23944092]
[95.09678650 64.65695190]
[96.20457458 49.69791412]
[97.31236267 34.73887634]
[98.42015076 19.77983856]
[86.02764893 0.27389440]
[97.83699036 -18.77451897]
[96.17720032 -33.68240738]
[94.51741028 -48.59029388]
[92.85762024 -63.49818039]
[91.19783020 -78.40606689]
[87.05117798 -86.82214355]
[89.76264954 -93.89408112]
[88.65486908 -108.85311890]
[78.98651123 -122.09906006]
[85.87018585 -136.98352051]
[102.22454834 -138.19464111]
[111.22563934 -124.48652649]
[103.61389923 -109.96090698]
[104.72168732 -95.00186920]
[106.10571289 -80.06585693]
[107.76550293 -65.15796661]
[109.42529297 -50.25008392]
[111.08509064 -35.34219742]
[112.74488068 -20.43430901]
[119.80056000 -17.27182198]
[125.26696777 -11.70562935]
[128.35591125 -4.46599865]
[128.59587097 3.47098541]
[125.90316010 11.01497364]
[120.60052490 17.11113930]
[113.37918854 20.88762665]
[112.27140045 35.84666443]
[111.16361237 50.80570221]
[110.05582428 65.76473999]
[123.86239624 73.47154999]
[132.98304749 86.38783264]
[135.62672424 101.97716522]
[131.27427673 117.17824554]
[120.78041840 129.00598145]
[106.20584869 135.13772583]
[105.65157318 150.12748718]
[105.09729767 165.11724854]
[119.45917511 172.51744080]
[129.16807556 185.35890198]
[132.35061646 201.08097839]
[128.42855835 216.57556152]
[118.22319794 228.80155945]
[103.78393555 235.38169861]
[103.78393555 250.38169861]
[103.78393555 265.38171387]
[103.78393555 280.38171387]
[103.78393555 295.38171387]
[103.78393555 310.38171387]
[103.78393555 325.38171387]
[103.78393555 340.38171387]
[103.78393555 355.38171387]
[103.78393555 370.38171387]
[109.83027649 386.22082520]
] def
/pairs [
[2 83]
[3 82]
[4 81]
[5 80]
[6 79]
[7 78]
[8 77]
[9 76]
[10 75]
[11 74]
[18 68]
[19 67]
[20 66]
[27 60]
[28 59]
[29 58]
[30 57]
[32 50]
[33 49]
[34 48]
[35 47]
[36 46]
[38 45]
[39 44]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
