%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.8
%%CreationDate: Tue Aug 29 01:48:46 2023
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
CGAUGUUAUGCAGGAUAUCUCCCUUGAAUGCGGAGAGAAGGGCAUAGGGAGACAUACGCCUUAUUACAUGAGGAUCACCCAUGU\
) def
/coor [
[114.82859802 119.50965881]
[102.53248596 110.91863251]
[90.07972717 102.55628967]
[77.47456360 94.42549133]
[64.86940765 86.29469299]
[52.26424408 78.16388702]
[39.65908432 70.03308868]
[26.35747719 63.10003281]
[12.47291279 57.42386627]
[-1.41165173 51.74769974]
[-15.29621696 46.07153320]
[-25.52586555 56.00611115]
[-38.74621582 61.23311615]
[-52.91652298 60.98171616]
[-65.86318970 55.32399368]
[-75.61320496 45.15874100]
[-80.69477844 32.06883240]
[-80.35948181 18.07482147]
[-94.02481842 11.88947582]
[-107.69016266 5.70413113]
[-121.35549927 -0.48121369]
[-135.02084351 -6.66655827]
[-148.79814148 -12.59832668]
[-163.27249146 -6.25255442]
[-177.96394348 -12.07807064]
[-184.15634155 -26.61870003]
[-178.17581177 -41.24774551]
[-163.57052612 -47.28605270]
[-149.00553894 -41.15120316]
[-143.12197876 -26.48289108]
[-135.55827332 -26.87630653]
[-128.83549500 -20.33189774]
[-115.17015839 -14.14655304]
[-101.50481415 -7.96120882]
[-87.83947754 -1.77586389]
[-74.17414093 4.40948105]
[-62.22536087 -6.03164768]
[-46.87895966 -10.28749371]
[-31.14575195 -7.47128487]
[-18.13492393 1.91116691]
[-10.43959045 16.05145645]
[-9.62005043 32.18696976]
[4.26451397 37.86313629]
[18.14907837 43.53929901]
[32.03364563 49.21546555]
[34.32837677 48.06097031]
[37.21923447 47.73373413]
[40.40146637 48.45891190]
[43.49712372 50.35116959]
[46.09393311 53.39326477]
[47.78988266 57.42792892]
[60.39504623 65.55873108]
[73.00020599 73.68952942]
[85.60536957 81.82032776]
[98.21052551 89.95112610]
[106.35743713 91.38383484]
[111.12351227 98.62252808]
[123.41962433 107.21355438]
[130.27505493 103.99768066]
[137.75379944 103.21501160]
[145.02397156 104.91786194]
[151.28823853 108.88401031]
[155.87129211 114.64499664]
[158.29257202 121.54124451]
[158.31648254 128.79750061]
[155.97492981 135.60997009]
[166.08036804 146.69509888]
[176.18580627 157.78022766]
[186.29124451 168.86537170]
[196.39666748 179.95050049]
[204.69822693 184.32191467]
[206.66137695 191.63699341]
[216.35029602 203.08796692]
[231.95793152 208.12124634]
[235.13778687 224.20915222]
[222.61871338 234.80181885]
[207.27925110 229.00242615]
[204.89932251 212.77688599]
[195.21040344 201.32591248]
[185.31153870 190.05593872]
[175.20610046 178.97079468]
[165.10067749 167.88566589]
[154.99523926 156.80053711]
[144.88980103 145.71539307]
] def
/pairs [
[1 58]
[2 57]
[3 55]
[4 54]
[5 53]
[6 52]
[7 51]
[8 45]
[9 44]
[10 43]
[11 42]
[18 36]
[19 35]
[20 34]
[21 33]
[22 32]
[23 30]
[66 84]
[67 83]
[68 82]
[69 81]
[70 80]
[72 79]
[73 78]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
