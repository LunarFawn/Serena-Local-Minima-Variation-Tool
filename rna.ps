%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.8
%%CreationDate: Mon Jul 10 07:36:03 2023
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
GCAACGCCUGACAUGAGGAUCACCCAUGUUAGAUUGUUAUGUCAGGAUAUUGUCUCGAAACGAGACGAGAAGGGAUAUGUUGCU\
) def
/coor [
[113.95675659 186.67968750]
[113.40248871 171.68994141]
[112.84821320 156.70018005]
[112.29394531 141.71041870]
[111.73966980 126.72066498]
[96.90569305 127.39952850]
[84.51936340 120.84110260]
[77.62528229 109.60545349]
[62.68927002 110.98947906]
[47.75325394 112.37350464]
[32.81724167 113.75753021]
[17.88122940 115.14155579]
[2.94521761 116.52558136]
[-11.99079514 117.90960693]
[-26.92680740 119.29363251]
[-35.41807175 123.28404999]
[-42.43869781 120.44235992]
[-57.41565323 121.27353668]
[-70.83799744 130.69546509]
[-85.59270477 123.53791809]
[-86.50141144 107.16396332]
[-72.62930298 98.41772461]
[-58.24682617 106.29657745]
[-43.26987076 105.46540833]
[-28.31083298 104.35762024]
[-13.37482071 102.97359467]
[1.56119227 101.58956909]
[16.49720573 100.20554352]
[31.43321800 98.82151794]
[46.36922836 97.43749237]
[61.30524445 96.05346680]
[76.24125671 94.66944122]
[79.86147308 85.11856842]
[87.24334717 77.65354156]
[97.28256226 73.71794891]
[108.33967590 74.20137024]
[118.50731659 79.25049591]
[125.93920135 88.20513916]
[129.18406677 99.67666626]
[143.06861877 94.00050354]
[156.95318604 88.32434082]
[170.83775330 82.64817047]
[184.72232056 76.97200775]
[185.06269836 62.71628189]
[190.83514404 49.72481537]
[201.12333679 39.97730637]
[214.32568359 34.94501495]
[228.40458679 35.36874008]
[241.20089722 41.14996719]
[250.76502991 51.37112808]
[264.84985352 46.21189499]
[278.93469238 41.05266190]
[293.01950073 35.89342499]
[307.10433960 30.73419189]
[321.18914795 25.57495880]
[335.27398682 20.41572571]
[349.35879517 15.25649166]
[362.15194702 4.13119650]
[376.38394165 13.34457684]
[371.47042847 29.57090759]
[354.51803589 29.34131622]
[340.43322754 34.50054932]
[326.34838867 39.65978241]
[312.26358032 44.81901932]
[298.17874146 49.97825241]
[284.09390259 55.13748550]
[270.00909424 60.29671860]
[255.92427063 65.45595551]
[254.71195984 81.27748108]
[246.74200439 95.06530762]
[233.54176331 104.07742310]
[217.68428040 106.49665833]
[202.28694153 101.79691315]
[190.39848328 90.85657501]
[176.51391602 96.53273773]
[162.62936401 102.20890045]
[148.74479675 107.88507080]
[134.86022949 113.56123352]
[126.72942352 126.16639709]
[127.28369904 141.15615845]
[127.83797455 156.14590454]
[128.39224243 171.13566589]
[128.94651794 186.12541199]
[131.84745789 205.28878784]
] def
/pairs [
[1 83]
[2 82]
[3 81]
[4 80]
[5 79]
[8 32]
[9 31]
[10 30]
[11 29]
[12 28]
[13 27]
[14 26]
[15 25]
[17 24]
[18 23]
[39 78]
[40 77]
[41 76]
[42 75]
[43 74]
[50 68]
[51 67]
[52 66]
[53 65]
[54 64]
[55 63]
[56 62]
[57 61]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
