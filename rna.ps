%!PS-Adobe-3.0 EPSF-3.0
%%Creator: PS_dot.c,v 1.38 2007/02/02 15:18:13 ivo Exp $, ViennaRNA-2.1.8
%%CreationDate: Sun Sep  3 13:26:59 2023
%%Title: RNA Secondary Structure Plot
%%BoundingBox: 66 210 518 662
%%DocumentFonts: Helvetica
%%Pages: 1
%%EndComments

%Options: -d2 
% to switch off outline pairs of sequence comment or
% delete the appropriate line near the end of the file

%%BeginProlog
/RNAplot 100 dict def
RNAplot begin
/fsize  14 def
/outlinecolor {0.2 setgray} bind def
/paircolor    {0.2 setgray} bind def
/seqcolor     {0   setgray} bind def
/cshow  { dup stringwidth pop -2 div fsize -3 div rmoveto show} bind def
/min { 2 copy gt { exch } if pop } bind def
/max { 2 copy lt { exch } if pop } bind def
/arccoords { % i j arccoords
  % puts optimal x1 y1 x2 y2 coordinates used in bezier curves from i to j
  % onto the stack
  dup 3 -1 roll dup 4 -1 roll lt dup dup 5 2 roll {exch} if
  dup 3 -1 roll dup 3 -1 roll exch sub 1 sub dup
  4 -2 roll 5 -1 roll {exch} if 4 2 roll
  sequence length dup 2 div exch 3 1 roll lt 
  {exch 5 -1 roll pop 4 -2 roll exch 4 2 roll}
  { 4 2 roll 5 -1 roll dup 6 1 roll {exch} if
    4 -2 roll exch pop dup 3 -1 roll dup 4 1 roll
    exch add 4 -1 roll dup 5 1 roll sub 1 sub
    5 -1 roll not {4 -2 roll exch 4 2 roll} if
  }ifelse
   % compute the scalingfactor and prepare (1-sf) and sf*r
  2 mul exch cpr 3 1 roll div dup
  3 -1 roll mul exch 1 exch sub exch
   % compute the coordinates
  3 -1 roll 1 sub coor exch get aload pop % get coord for i
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate y1
  4 -1 roll dup 5 1 roll mul 3 -1 roll dup 4 1 roll add exch % calculate x1
  5 -1 roll 1 sub coor exch get aload pop % get coord for j
  % duplicate j coord
  dup 3 -1 roll dup 4 1 roll exch 8 2 roll
  6 -1 roll dup 7 1 roll mul 5 -1 roll dup 6 1 roll add exch % calculate y2
  6 -1 roll mul 5 -1 roll add exch % calculate x2
  6 -2 roll % reorder
} bind def
/drawoutline {
  gsave outlinecolor newpath
  coor 0 get aload pop 0.8 0 360 arc % draw 5' circle of 1st sequence
  currentdict /cutpoint known        % check if cutpoint is defined
  {coor 0 cutpoint getinterval
   {aload pop lineto} forall         % draw outline of 1st sequence
   coor cutpoint 1 add get aload pop
   2 copy moveto 0.8 0 360 arc       % draw 5' circle of 2nd sequence
   coor cutpoint 1 add coor length cutpoint 1 add sub getinterval
   {aload pop lineto} forall}        % draw outline of 2nd sequence
  {coor {aload pop lineto} forall}   % draw outline as a whole
  ifelse
  stroke grestore
} bind def
/drawpairs {
  paircolor
  0.7 setlinewidth
  [9 3.01] 9 setdash
  newpath
  pairs {aload pop
      currentdict (cpr) known
      { exch dup
        coor  exch 1 sub get aload pop moveto
        exch arccoords curveto
      }
      { coor exch 1 sub get aload pop moveto
        coor exch 1 sub get aload pop lineto
      }ifelse
  } forall
  stroke
} bind def
% draw bases
/drawbases {
  [] 0 setdash
  seqcolor
  0
  coor {
    aload pop moveto
    dup sequence exch 1 getinterval cshow
    1 add
  } forall
  pop
} bind def

/init {
  /Helvetica findfont fsize scalefont setfont
  1 setlinejoin
  1 setlinecap
  0.8 setlinewidth
  72 216 translate
  % find the coordinate range
  /xmax -1000 def /xmin 10000 def
  /ymax -1000 def /ymin 10000 def
  coor {
      aload pop
      dup ymin lt {dup /ymin exch def} if
      dup ymax gt {/ymax exch def} {pop} ifelse
      dup xmin lt {dup /xmin exch def} if
      dup xmax gt {/xmax exch def} {pop} ifelse
  } forall
  /size {xmax xmin sub ymax ymin sub max} bind def
  72 6 mul size div dup scale
  size xmin sub xmax sub 2 div size ymin sub ymax sub 2 div
  translate
} bind def
end
%%EndProlog
RNAplot begin
% data start here
/sequence (\
UGGUCAUGAUCAGGAUAUUAACAUGGGCUACAUUAAGAAGGGAUAGUGAGAUACGAACUGAACGACAUGAGGAUCACCCAUGUA\
) def
/coor [
[172.30311584 183.92787170]
[157.30154419 169.20834351]
[149.45524597 149.67051697]
[150.11163330 128.58871460]
[136.22706604 122.91255188]
[122.34249878 117.23638916]
[108.45793915 111.56021881]
[94.57965851 113.25878143]
[85.86589813 102.32434082]
[71.98133087 96.64817810]
[58.09676743 90.97201538]
[47.86711884 100.90659332]
[34.64677048 106.13359070]
[20.47646332 105.88219452]
[7.52979374 100.22447205]
[-2.22022057 90.05921936]
[-7.30179691 76.96931458]
[-6.96649647 62.97529984]
[-20.63183594 56.78995514]
[-34.29717636 50.60461044]
[-41.29797363 50.89195251]
[-46.48753738 47.89820480]
[-48.71695328 43.42441177]
[-61.88817215 36.24673843]
[-75.05939484 29.06906509]
[-90.79310608 32.20431519]
[-102.96073914 21.74829674]
[-102.22831726 5.72197199]
[-89.15769958 -3.58063531]
[-73.77554321 0.97664046]
[-67.88172150 15.89784718]
[-54.71049881 23.07552147]
[-41.53927994 30.25319481]
[-28.11183167 36.93927002]
[-14.44649124 43.12461472]
[-0.78115183 49.30995941]
[11.16762352 38.86883163]
[26.51402664 34.61298370]
[42.24723434 37.42919159]
[55.25806046 46.81164551]
[62.95339584 60.95193481]
[63.77293396 77.08744812]
[77.65750122 82.76361084]
[91.54206085 88.43978119]
[105.42034149 86.74121857]
[114.13410187 97.67565918]
[128.01866150 103.35182190]
[141.90322876 109.02798462]
[155.78779602 114.70415497]
[161.94166565 106.40650177]
[169.62365723 99.50971222]
[178.52239990 94.28964996]
[188.27789307 90.95427704]
[198.49615479 89.63540649]
[208.76507568 90.38343811]
[218.67108154 93.16548920]
[227.81571960 97.86680603]
[235.83177185 104.29550171]
[242.39793396 112.19036865]
[247.25175476 121.23152924]
[250.20005798 131.05335999]
[251.12667847 141.25927734]
[249.99700928 151.43778992]
[246.85932922 161.17904663]
[241.84268188 170.09135437]
[252.73918152 180.39991760]
[263.63568115 190.70846558]
[274.53219604 201.01701355]
[285.42868042 211.32556152]
[294.03042603 215.07194519]
[296.52844238 222.22206116]
[307.03659058 232.92622375]
[322.97332764 236.79309082]
[327.33261108 252.60221863]
[315.63003540 264.09051514]
[299.90414429 259.43981934]
[296.33242798 243.43435669]
[285.82427979 232.73020935]
[275.12014771 222.22206116]
[264.22363281 211.91351318]
[253.32713318 201.60496521]
[242.43063354 191.29641724]
[231.53411865 180.98786926]
[212.83171082 190.32650757]
] def
/pairs [
[4 49]
[5 48]
[6 47]
[7 46]
[9 44]
[10 43]
[11 42]
[18 36]
[19 35]
[20 34]
[23 33]
[24 32]
[25 31]
[65 83]
[66 82]
[67 81]
[68 80]
[69 79]
[71 78]
[72 77]
] def

init

% switch off outline pairs or bases by removing these lines
drawoutline
drawpairs
drawbases
% show it
showpage
end
%%EOF
